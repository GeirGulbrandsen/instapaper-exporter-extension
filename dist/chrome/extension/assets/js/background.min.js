/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	function save(highlights) {
	  console.log(arguments);
	  console.log('save', highlights);
	  var json = JSON.stringify(highlights);
	  console.log(json);
	  var blob = new Blob([json], {
	    encoding: "UTF-8",
	    type: "application/json;charset=UTF-8"
	  });
	  var size = blob.size + 1024 / 2;
	  var filename = "instapaper_highlights_export-" + Date.now() + ".json";

	  // create a blob for writing to a file
	  var reqFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
	  reqFileSystem(window.TEMPORARY, size, function (fs) {
	    fs.root.getFile(filename, { create: true }, function (fileEntry) {
	      fileEntry.createWriter(function (fileWriter) {
	        fileWriter.onwriteend = openExport.bind(null, filename);
	        fileWriter.write(blob);
	      });
	    });
	  });
	}

	function openExport(filename) {
	  // open the file that now contains the blob - calling
	  // `openPage` again if we had to split up the image
	  var url = 'filesystem:chrome-extension://' + chrome.i18n.getMessage('@@extension_id') + '/temporary/' + filename;

	  // chrome.tabs.create({url: url});
	  chrome.downloads.download({
	    filename: filename,
	    url: url,
	    saveAs: true
	  });
	}

	function handleActionClick(e) {
	  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
	    chrome.tabs.sendMessage(tabs[0].id, { message: 'scrape_page' });
	  });
	}

	function handleInstalled(details) {
	  chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
	    var rule = {
	      conditions: [new chrome.declarativeContent.PageStateMatcher({
	        pageUrl: {
	          urlContains: 'instapaper.com/notes',
	          schemes: ['https']
	        }
	      })],
	      actions: [new chrome.declarativeContent.ShowPageAction()]
	    };

	    chrome.declarativeContent.onPageChanged.addRules([rule]);
	  });

	  if (details.reason === "install") {
	    // TODO: Open tab with instructions
	    // chrome.tabs.create({
	    //   url: 'http://www.dropmark.com/extension/welcome'
	    // });
	  }
	}

	function handleMessage(request, sender, callback) {
	  if (request.message === 'save_highlights') {
	    save(request.highlights);
	  }
	}

	chrome.pageAction.onClicked.addListener(handleActionClick);
	chrome.runtime.onMessage.addListener(handleMessage);

	if (chrome.runtime.onInstalled) chrome.runtime.onInstalled.addListener(handleInstalled);

/***/ }
/******/ ]);